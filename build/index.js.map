{"mappings":"uBAAO,ICgBHA,EDhBSC,EAAsB,SAACC,GAClC,IAAIC,EAAuBC,OAAOC,QAAUD,OAAOE,YAKnD,OAJwBJ,EAAIK,cACGH,OAAOI,YAAcN,EAAIO,wBAAwBC,KAEhBP,GAyBrDQ,EACH,+BADGA,EAEQ,gCAFRA,EAGG,6BAHHA,EAID,gCAJCA,EAKC,kCALDA,EAMC,oCAIDC,EAAiB,SAACC,EAAoBX,IA/BzB,SAACA,GAAgE,IAA9CY,EAA8CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAhC,sBACzDb,EAAIgB,MAAMC,OAAS,KACnB,IAAK,IAAIC,EAAIlB,EAAImB,UAAUL,OAAS,EAAGI,GAAK,EAAGA,IAAK,CAClD,IAAME,EAAYpB,EAAImB,UAAUD,GAC5BE,EAAUC,WAAWT,IACvBZ,EAAImB,UAAUG,OAAOF,IA2BzBG,CAAWvB,GACXA,EAAImB,UAAUK,IAAIb,ICtCdc,EAAsBC,SAASC,cAAc,2BAC7CC,EAAsBH,EAAOI,cAE/BC,EAAuBL,EAAOpB,aAE9B0B,EAAuBH,EAAOvB,aAQ9B2B,GAAsB,kBAEA,WAYxB,GAXIC,EAAoBR,KACtBS,EAAeC,EAA0BV,GAErC3B,IAAiBkC,GAAa,IAGhCC,EAAoBL,IACtBM,EAAeC,EAAqBV,IAIjCQ,EAAoBR,IAAW3B,IAAoBkC,EAAY,CAClE,IAEII,EAFaL,EAAeD,GACIL,EAAOlB,wBAAwBC,IAAMoB,EAAOrB,wBAAwBC,KAGxG0B,EAAeC,EAAiBV,GAChCA,EAAOT,MAAMC,OAAb,GAAAoB,OAAyBD,EAAzB,MACAJ,GAAa,EAIf,IAAKlC,GAAmB2B,EAAON,UAAUmB,SAAS,uCAAyCN,EAAY,CACrG,IAEII,EAFaL,EAAeD,GACIL,EAAOlB,wBAAwBC,IAAMoB,EAAOrB,wBAAwBC,KAGxG0B,EAAeC,EAAmBV,GAClCA,EAAOT,MAAMC,OAAb,GAAAoB,OAAyBD,EAAzB,MACAJ,GAAa,EAGVlC,IAAiBkC,GAAa,GAG/BP,EAAOlB,wBAAwBC,IAAM,GAAKV,GAC5CoC,EAAeC,EAAmBV,GAGhCG,EAAOrB,wBAAwBC,IAAM,GACvC0B,EAAeC,EAAeV,GAGhCvB,OAAOqC,SAAW,WAEhBzC,EAAkB0C,KAAKC,UAAYD,KAAKrC,QACxCqC,KAAKC,UAAYD,KAAKrC","sources":["./src/utils/index.ts","./src/index.ts"],"sourcesContent":["export const isElmScrolledBottom = (elm: HTMLElement): boolean => {\n  let bottomScroll: number = window.scrollY + window.innerHeight\n  let elmHeight: number = elm.offsetHeight\n  let elmDistanceToTop: number = window.pageYOffset + elm.getBoundingClientRect().top\n\n  const isScrolledToEnd: boolean = elmHeight + elmDistanceToTop < bottomScroll\n  return isScrolledToEnd\n}\n\nexport const resetStyle = (elm: HTMLElement, classPrefix = 'sticky-scroll-catch'): void => {\n  elm.style.bottom = null\n  for (let i = elm.classList.length - 1; i >= 0; i--) {\n    const className = elm.classList[i]\n    if (className.startsWith(classPrefix)) {\n      elm.classList.remove(className)\n    }\n  }\n}\n\n// when one state is active all others are not\ninterface StatesConfig {\n  INITAL: string\n  SCROLL_DOWN_CATCH: string\n  SCROLL_BREAK: string\n  UPSCROLL: string\n  DOWNSCROLL: string\n  SCROLL_TOP: string\n  SCROLL_TOP_BREAK: string\n}\n\nexport const STATES: StatesConfig = {\n  INITAL: 'sticky-scroll-catch--initial',\n  SCROLL_DOWN_CATCH: 'sticky-scroll-catch--scrolled',\n  SCROLL_BREAK: 'sticky-scroll-catch--break',\n  UPSCROLL: 'sticky-scroll-catch--upscroll',\n  DOWNSCROLL: 'sticky-scroll-catch--downscroll',\n  SCROLL_TOP: 'sticky-scroll-catch--scrolled-top',\n  SCROLL_TOP_BREAK: 'sticky-scroll-catch--initial',\n}\n\nexport const setActiveState = (classToAdd: string, elm: HTMLElement): void => {\n  resetStyle(elm)\n  elm.classList.add(classToAdd)\n}\n","import { STATES, setActiveState, isElmScrolledBottom } from './utils'\n// import debounce from './utils/debounce'\nimport './index.css'\n\nconst target: HTMLElement = document.querySelector('.js-sticky-scroll-catch')\nconst parent: HTMLElement = target.parentElement\n\nlet targetHeight: number = target.offsetHeight\n// let targetWidth: number = target.offsetWidth\nlet parentHeight: number = parent.offsetHeight\n// let parentWidth: number = parent.offsetWidth\n// TODO: calc width of parent - width of target\n// use that val as left: property for fixed and absolute pos\n// let leftSpace = parentWidth - targetWidth - target.getBoundingClientRect().left\n// target.style.left = `${leftSpace}px`\n\nlet scrollDirection: boolean\nlet isCatchPos: boolean = false\n\nconst stickyScrollCatch = () => {\n  if (isElmScrolledBottom(target)) {\n    setActiveState(STATES.SCROLL_DOWN_CATCH, target)\n\n    if (scrollDirection) isCatchPos = true\n  }\n\n  if (isElmScrolledBottom(parent)) {\n    setActiveState(STATES.SCROLL_BREAK, target)\n  }\n\n  // handle scroll up and 'catch' so scrolls with window\n  if (!isElmScrolledBottom(target) && scrollDirection && !isCatchPos) {\n    let YAxisSpace = parentHeight - targetHeight\n    let topDistanceFromParent: number = target.getBoundingClientRect().top - parent.getBoundingClientRect().top\n    let bottomYAxisSpace: number = YAxisSpace - topDistanceFromParent\n\n    setActiveState(STATES.UPSCROLL, target)\n    target.style.bottom = `${bottomYAxisSpace}px`\n    isCatchPos = true\n  }\n\n  // handle scroll up and 'catch' so scrolls with window DOWNSCROLL catch\n  if (!scrollDirection && target.classList.contains('sticky-scroll-catch--scrolled-top') && !isCatchPos) {\n    let YAxisSpace = parentHeight - targetHeight\n    let topDistanceFromParent: number = target.getBoundingClientRect().top - parent.getBoundingClientRect().top\n    let bottomYAxisSpace: number = YAxisSpace - topDistanceFromParent\n\n    setActiveState(STATES.DOWNSCROLL, target)\n    target.style.bottom = `${bottomYAxisSpace}px`\n    isCatchPos = true\n  }\n\n  if (!scrollDirection) isCatchPos = false\n\n  // fix to top\n  if (target.getBoundingClientRect().top > 0 && scrollDirection) {\n    setActiveState(STATES.SCROLL_TOP, target)\n  }\n\n  if (parent.getBoundingClientRect().top > 0) {\n    setActiveState(STATES.INITAL, target)\n  }\n\n  window.onscroll = function () {\n    // print \"false\" if direction is down and \"true\" if up // creds IT VLOG https://stackoverflow.com/questions/31223341/detecting-scroll-direction\n    scrollDirection = this.oldScroll > this.scrollY\n    this.oldScroll = this.scrollY\n  }\n}\n\nexport default stickyScrollCatch\n"],"names":["scrollDirection","isElmScrolledBottom","elm","bottomScroll","window","scrollY","innerHeight","offsetHeight","pageYOffset","getBoundingClientRect","top","STATES","setActiveState","classToAdd","classPrefix","arguments","length","undefined","style","bottom","i","classList","className","startsWith","remove","resetStyle","add","target","document","querySelector","parent","parentElement","targetHeight","parentHeight","isCatchPos","$e101a76f8169080de308c219bd9fe$export$isElmScrolledBottom","$e101a76f8169080de308c219bd9fe$export$setActiveState","$e101a76f8169080de308c219bd9fe$export$STATES","bottomYAxisSpace","concat","contains","onscroll","this","oldScroll"],"version":3,"file":"index.js.map"}